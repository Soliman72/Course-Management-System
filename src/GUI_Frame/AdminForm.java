/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_Frame;

import com.mycompany.coursemanagement.Admin;
import com.mycompany.coursemanagement.Course;
import com.mycompany.coursemanagement.FileManagement;
import com.mycompany.coursemanagement.Notice;
import com.mycompany.coursemanagement.Teacher;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ME1
 */
public class AdminForm extends javax.swing.JFrame {

    private String adminEmail;

    /**
     * Creates new form login
     */
    public AdminForm() {
        initComponents();

        // Add mouse listeners to manage visibility of panels
        StudentPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(true, false, false, false, false);
            }
        });

        TeacherPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, true, false, false, false);
            }
        });

        CoursePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, false, true, false, false);
            }
        });

        NoticePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, false, false, true, false);
            }
        });

        basedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, false, false, false, true);
            }
        });
    }

    /**
     * Utility method to toggle visibility of panels.
     */
    private void setPanelVisibility(boolean student, boolean teacher, boolean course, boolean notice, boolean base) {
        // Refresh the GUI
        revalidate();
        repaint();
    }

    public AdminForm(String email) {
        this.adminEmail = email;
        initComponents();
        // Add mouse listeners to manage visibility of panels
        StudentPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(true, false, false, false, false);
            }
        });

        TeacherPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, true, false, false, false);
            }
        });

        CoursePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, false, true, false, false);
            }
        });

        NoticePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, false, false, true, false);
            }
        });

        basedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                setPanelVisibility(false, false, false, false, true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        StudentPanel = new javax.swing.JPanel();
        TeacherPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CoursePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        NoticePanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        basedPanel = new javax.swing.JPanel();
        exitLabel2 = new javax.swing.JLabel();
        logoutLabel = new javax.swing.JLabel();
        adminLabel = new javax.swing.JLabel();
        adminNameLabel = new javax.swing.JLabel();
        jlAdminName = new javax.swing.JTextField();
        editData = new javax.swing.JButton();
        NoticeLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        NoticesTable = new javax.swing.JTable();
        NoticesLabel = new javax.swing.JLabel();
        exitLabel3 = new javax.swing.JLabel();
        addNoticeButton2 = new javax.swing.JButton();
        editNoticeButton = new javax.swing.JButton();
        CourseLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        CoursesTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        AssignmentCoursesTable = new javax.swing.JTable();
        assignCourseLabel = new javax.swing.JLabel();
        CoursesLabel = new javax.swing.JLabel();
        exitLabel5 = new javax.swing.JLabel();
        showAssignmentButton = new javax.swing.JButton();
        addCourseButton = new javax.swing.JButton();
        editCourseButton = new javax.swing.JButton();
        TeacherLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        CoursesTeacherTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TeachersTable = new javax.swing.JTable();
        CoursesTeacherLabel = new javax.swing.JLabel();
        TeachersLabel = new javax.swing.JLabel();
        exitLabel = new javax.swing.JLabel();
        showCoursesButton1 = new javax.swing.JButton();
        addTeacherButton = new javax.swing.JButton();
        deleteCoursesTeacherButton = new javax.swing.JButton();
        addCoursesTeacherButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        StudentsTable = new javax.swing.JTable();
        StudentLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CoursesStudentTable = new javax.swing.JTable();
        courseStudentLabel = new javax.swing.JLabel();
        StudentsLabel = new javax.swing.JLabel();
        exitLabel1 = new javax.swing.JLabel();
        addStudentButton = new javax.swing.JButton();
        showCoursesButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        ServicePanel = new javax.swing.JPanel();
        NoticeLink = new javax.swing.JLabel();
        ServiceLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        studentLink = new javax.swing.JLabel();
        TeacherLink = new javax.swing.JLabel();
        CourseLink = new javax.swing.JLabel();
        backLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        StudentPanel.setBackground(new java.awt.Color(0, 0, 0));
        StudentPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        StudentPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TeacherPanel.setBackground(new java.awt.Color(0, 0, 0));
        TeacherPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        TeacherPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TeacherPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, -1, -1));

        CoursePanel.setBackground(new java.awt.Color(0, 0, 0));
        CoursePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        CoursePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        CoursePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, -1, -1));

        NoticePanel.setBackground(new java.awt.Color(0, 0, 0));
        NoticePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        NoticePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        NoticePanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, -1, -1));

        basedPanel.setBackground(new java.awt.Color(0, 0, 0));
        basedPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        basedPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        exitLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exitLabel2.setForeground(new java.awt.Color(255, 255, 255));
        exitLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitLabel2.setText("X");
        exitLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabel2MouseClicked(evt);
            }
        });
        basedPanel.add(exitLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 29));

        logoutLabel.setBackground(new java.awt.Color(0, 0, 0));
        logoutLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        logoutLabel.setForeground(new java.awt.Color(255, 255, 255));
        logoutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/001-logoute.png"))); // NOI18N
        logoutLabel.setText("Logout");
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutLabelMouseClicked(evt);
            }
        });
        basedPanel.add(logoutLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 90, 40));

        adminLabel.setBackground(new java.awt.Color(0, 0, 0));
        adminLabel.setFont(new java.awt.Font("Arial", 0, 32)); // NOI18N
        adminLabel.setForeground(new java.awt.Color(255, 255, 255));
        adminLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        adminLabel.setText("Admin Dashboard");
        basedPanel.add(adminLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, -1, -1));

        adminNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        adminNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        adminNameLabel.setText("Admin Name : ");
        basedPanel.add(adminNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 110, 30));

        jlAdminName.setBackground(new java.awt.Color(0, 0, 0));
        jlAdminName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jlAdminName.setForeground(new java.awt.Color(255, 255, 255));
        jlAdminName.setText("Unknown");
        basedPanel.add(jlAdminName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 122, 120, 30));

        editData.setBackground(new java.awt.Color(0, 0, 0));
        editData.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        editData.setForeground(new java.awt.Color(255, 255, 255));
        editData.setText("Update Your Data");
        editData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDataActionPerformed(evt);
            }
        });
        basedPanel.add(editData, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 203, 200, 40));

        NoticePanel.add(basedPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 530));

        NoticeLabel.setBackground(new java.awt.Color(0, 0, 0));
        NoticeLabel.setFont(new java.awt.Font("Arial", 0, 32)); // NOI18N
        NoticeLabel.setForeground(new java.awt.Color(255, 255, 255));
        NoticeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NoticeLabel.setText("Notice Management");
        NoticePanel.add(NoticeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jScrollPane9.setBackground(new java.awt.Color(0, 0, 0));

        NoticesTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NoticesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Name", "Title", "Content", "Date"
            }
        ));
        jScrollPane9.setViewportView(NoticesTable);
        if (NoticesTable.getColumnModel().getColumnCount() > 0) {
            NoticesTable.getColumnModel().getColumn(3).setResizable(false);
        }

        NoticePanel.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 800, 350));

        NoticesLabel.setBackground(new java.awt.Color(0, 0, 0));
        NoticesLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        NoticesLabel.setForeground(new java.awt.Color(255, 255, 255));
        NoticesLabel.setText("Notices");
        NoticePanel.add(NoticesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 80, 20));

        exitLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exitLabel3.setForeground(new java.awt.Color(255, 255, 255));
        exitLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitLabel3.setText("X");
        exitLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabel3MouseClicked(evt);
            }
        });
        NoticePanel.add(exitLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 29));

        addNoticeButton2.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        addNoticeButton2.setText("Add");
        addNoticeButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNoticeButton2MouseClicked(evt);
            }
        });
        NoticePanel.add(addNoticeButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 150, 30));

        editNoticeButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        editNoticeButton.setText("Edit");
        editNoticeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editNoticeButtonMouseClicked(evt);
            }
        });
        NoticePanel.add(editNoticeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 480, 150, 30));

        CoursePanel.add(NoticePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 530));

        CourseLabel.setBackground(new java.awt.Color(0, 0, 0));
        CourseLabel.setFont(new java.awt.Font("Arial", 0, 32)); // NOI18N
        CourseLabel.setForeground(new java.awt.Color(255, 255, 255));
        CourseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CourseLabel.setText("Course Management");
        CoursePanel.add(CourseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jScrollPane6.setBackground(new java.awt.Color(0, 0, 0));

        CoursesTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Name", "Teacher email", "Description", "Price", "Time Period"
            }
        ));
        jScrollPane6.setViewportView(CoursesTable);

        CoursePanel.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 450, 350));

        jScrollPane7.setBackground(new java.awt.Color(0, 0, 0));

        AssignmentCoursesTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        AssignmentCoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "DaedLine"
            }
        ));
        jScrollPane7.setViewportView(AssignmentCoursesTable);

        CoursePanel.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, 360, 350));

        assignCourseLabel.setBackground(new java.awt.Color(0, 0, 0));
        assignCourseLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        assignCourseLabel.setForeground(new java.awt.Color(255, 255, 255));
        assignCourseLabel.setText("Assignments Of Course");
        CoursePanel.add(assignCourseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 150, 20));

        CoursesLabel.setBackground(new java.awt.Color(0, 0, 0));
        CoursesLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        CoursesLabel.setForeground(new java.awt.Color(255, 255, 255));
        CoursesLabel.setText("Courses");
        CoursePanel.add(CoursesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 70, 20));

        exitLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exitLabel5.setForeground(new java.awt.Color(255, 255, 255));
        exitLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitLabel5.setText("X");
        exitLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabel5MouseClicked(evt);
            }
        });
        CoursePanel.add(exitLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 29));

        showAssignmentButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        showAssignmentButton.setText("Show Assignment");
        showAssignmentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showAssignmentButtonMouseClicked(evt);
            }
        });
        CoursePanel.add(showAssignmentButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 480, 180, 30));

        addCourseButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        addCourseButton.setText("Add");
        addCourseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addCourseButtonMouseClicked(evt);
            }
        });
        CoursePanel.add(addCourseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 150, 30));

        editCourseButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        editCourseButton.setText("Edit");
        editCourseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editCourseButtonMouseClicked(evt);
            }
        });
        CoursePanel.add(editCourseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 480, 150, 30));

        TeacherPanel.add(CoursePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 530));

        TeacherLabel.setBackground(new java.awt.Color(0, 0, 0));
        TeacherLabel.setFont(new java.awt.Font("Arial", 0, 32)); // NOI18N
        TeacherLabel.setForeground(new java.awt.Color(255, 255, 255));
        TeacherLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TeacherLabel.setText("Teacher Management");
        TeacherPanel.add(TeacherLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        jScrollPane4.setBackground(new java.awt.Color(0, 0, 0));

        CoursesTeacherTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CoursesTeacherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Name", "Description", "Price", "Time Period"
            }
        ));
        jScrollPane4.setViewportView(CoursesTeacherTable);

        TeacherPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 430, 350));

        jScrollPane5.setBackground(new java.awt.Color(0, 0, 0));

        TeachersTable.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        TeachersTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TeachersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Password", "Specialty"
            }
        ));
        jScrollPane5.setViewportView(TeachersTable);

        TeacherPanel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 370, 350));

        CoursesTeacherLabel.setBackground(new java.awt.Color(0, 0, 0));
        CoursesTeacherLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        CoursesTeacherLabel.setForeground(new java.awt.Color(255, 255, 255));
        CoursesTeacherLabel.setText("Courses Of Teachers");
        TeacherPanel.add(CoursesTeacherLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 150, 20));

        TeachersLabel.setBackground(new java.awt.Color(0, 0, 0));
        TeachersLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TeachersLabel.setForeground(new java.awt.Color(255, 255, 255));
        TeachersLabel.setText("Teachers");
        TeacherPanel.add(TeachersLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 70, 20));

        exitLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exitLabel.setForeground(new java.awt.Color(255, 255, 255));
        exitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitLabel.setText("X");
        exitLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabelMouseClicked(evt);
            }
        });
        TeacherPanel.add(exitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 29));

        showCoursesButton1.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        showCoursesButton1.setText("Show Courses");
        showCoursesButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showCoursesButton1MouseClicked(evt);
            }
        });
        TeacherPanel.add(showCoursesButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 470, 150, 30));

        addTeacherButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        addTeacherButton.setText("Add Teacher");
        addTeacherButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addTeacherButtonMouseClicked(evt);
            }
        });
        TeacherPanel.add(addTeacherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 160, 30));

        deleteCoursesTeacherButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        deleteCoursesTeacherButton.setText(" Delete Course");
        deleteCoursesTeacherButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteCoursesTeacherButtonMouseClicked(evt);
            }
        });
        TeacherPanel.add(deleteCoursesTeacherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 470, 140, 30));

        addCoursesTeacherButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        addCoursesTeacherButton.setText("Add Course");
        addCoursesTeacherButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addCoursesTeacherButtonMouseClicked(evt);
            }
        });
        TeacherPanel.add(addCoursesTeacherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 470, 130, 30));

        StudentPanel.add(TeacherPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 530));

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));

        StudentsTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        StudentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Password"
            }
        ));
        jScrollPane1.setViewportView(StudentsTable);

        StudentPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 350, 350));

        StudentLabel.setFont(new java.awt.Font("Arial", 0, 32)); // NOI18N
        StudentLabel.setForeground(new java.awt.Color(255, 255, 255));
        StudentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        StudentLabel.setText("Student Management");
        StudentPanel.add(StudentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 420, 41));

        CoursesStudentTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CoursesStudentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Name", "Description", "Price", "Time Period"
            }
        ));
        jScrollPane2.setViewportView(CoursesStudentTable);

        StudentPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, 430, 350));

        courseStudentLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        courseStudentLabel.setForeground(new java.awt.Color(255, 255, 255));
        courseStudentLabel.setText("Courses Of Students");
        StudentPanel.add(courseStudentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 90, 150, 20));

        StudentsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        StudentsLabel.setForeground(new java.awt.Color(255, 255, 255));
        StudentsLabel.setText("Students");
        StudentPanel.add(StudentsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 70, 20));

        exitLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exitLabel1.setForeground(new java.awt.Color(255, 255, 255));
        exitLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitLabel1.setText("X");
        exitLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabel1MouseClicked(evt);
            }
        });
        StudentPanel.add(exitLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 40, 29));

        addStudentButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        addStudentButton.setText("Add Student");
        addStudentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addStudentButtonMouseClicked(evt);
            }
        });
        StudentPanel.add(addStudentButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 160, 30));

        showCoursesButton.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        showCoursesButton.setText("Show Courses");
        showCoursesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showCoursesButtonMouseClicked(evt);
            }
        });
        StudentPanel.add(showCoursesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 470, 160, 30));

        getContentPane().add(StudentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 830, 530));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setForeground(new java.awt.Color(242, 242, 242));
        jLabel12.setText("jLabel12");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(785, 100, 280, 200));

        ServicePanel.setBackground(new java.awt.Color(0, 0, 0));
        ServicePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(204, 204, 204), null, null));
        ServicePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NoticeLink.setBackground(new java.awt.Color(0, 0, 0));
        NoticeLink.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        NoticeLink.setForeground(new java.awt.Color(255, 255, 255));
        NoticeLink.setText("Notice Management");
        NoticeLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NoticeLinkMouseClicked(evt);
            }
        });
        ServicePanel.add(NoticeLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 160, 20));

        ServiceLabel.setBackground(new java.awt.Color(0, 0, 0));
        ServiceLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        ServiceLabel.setForeground(new java.awt.Color(255, 255, 255));
        ServiceLabel.setText("Service");
        ServicePanel.add(ServiceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));
        ServicePanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 21, -1, -1));

        studentLink.setBackground(new java.awt.Color(0, 0, 0));
        studentLink.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        studentLink.setForeground(new java.awt.Color(255, 255, 255));
        studentLink.setText("Student Management");
        studentLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentLinkMouseClicked(evt);
            }
        });
        ServicePanel.add(studentLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 150, 30));

        TeacherLink.setBackground(new java.awt.Color(0, 0, 0));
        TeacherLink.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        TeacherLink.setForeground(new java.awt.Color(255, 255, 255));
        TeacherLink.setText("Teacher Management");
        TeacherLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TeacherLinkMouseClicked(evt);
            }
        });
        ServicePanel.add(TeacherLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 160, 20));

        CourseLink.setBackground(new java.awt.Color(0, 0, 0));
        CourseLink.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        CourseLink.setForeground(new java.awt.Color(255, 255, 255));
        CourseLink.setText("Course Management");
        CourseLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CourseLinkMouseClicked(evt);
            }
        });
        ServicePanel.add(CourseLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 160, 20));

        backLabel.setBackground(new java.awt.Color(0, 0, 0));
        backLabel.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        backLabel.setForeground(new java.awt.Color(204, 204, 204));
        backLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backLabel.setText("Return to the Teacher Dashboard");
        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backLabelMouseClicked(evt);
            }
        });
        ServicePanel.add(backLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 510, 200, -1));

        getContentPane().add(ServicePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 200, 530));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/background.jpg"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -50, 1130, 670));

        setSize(new java.awt.Dimension(1128, 602));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        for (double i = 0.0; i <= 1.0; i = i + 0.1) {
            String val = i + "";
            float f = Float.parseFloat(val);
            this.setOpacity(f);
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
            }
        }
        try {
            // Retrieve the teacher's data using their email
            String[] teacherData = FileManagement.search(this.adminEmail, "admins.txt");

            if (teacherData != null) {
                // Set the labels with the retrieved data
                jlAdminName.setText(teacherData[0]); // Assuming the name is at index 0
            } else {
                // Handle case where no matching teacher is found
                jlAdminName.setText("Unknown");
            }
        } catch (Exception e) {
            e.printStackTrace(); // Log any unexpected exceptions
            jlAdminName.setText("Error");
        }
    }//GEN-LAST:event_formWindowOpened

    private void studentLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentLinkMouseClicked
        StudentPanel.setVisible(true);
        TeacherPanel.setVisible(false);
        try {
            // Use the readFromFile method to read the student data
            ArrayList<String[]> students = FileManagement.readFromFile("students.txt", line -> {
                // Split the line by commas
                String[] parts = line.split(",");
                if (parts.length >= 3) {
                    return new String[]{parts[0], parts[1], parts[2]}; // Extract only the required indices
                }
                return null;
            });

            DefaultTableModel model = (DefaultTableModel) StudentsTable.getModel();

            // Clear existing rows to prevent duplication
            model.setRowCount(0);

            // Populate the table with filtered student data
            for (String[] student : students) {
                if (student != null) { // Skip null values
                    model.addRow(student);
                }
            }
            model.setRowCount(model.getRowCount() + 1);
        } catch (IOException e) {
            e.printStackTrace(); // Handle the exception appropriately
        }
    }//GEN-LAST:event_studentLinkMouseClicked

    private void TeacherLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TeacherLinkMouseClicked
        StudentPanel.setVisible(true);
        TeacherPanel.setVisible(true);
        CoursePanel.setVisible(false);
        try {
            // Use the readFromFile method to read the teacher data
            ArrayList<String[]> teachers = FileManagement.readFromFile("teachers.txt", line -> {
                // Split the line by commas
                String[] parts = line.split(",");
                if (parts.length >= 0) {
                    return new String[]{parts[0], parts[1], parts[2], parts[3]}; // Extract only the required indices
                }
                return null;
            });

            DefaultTableModel model = (DefaultTableModel) TeachersTable.getModel();

            // Clear existing rows to prevent duplication
            model.setRowCount(0);

            // Populate the table with filtered teacher data
            for (String[] teacher : teachers) {
                if (teacher != null) { // Skip null values
                    model.addRow(teacher);
                }
            }
            model.setRowCount(model.getRowCount() + 1);
        } catch (IOException e) {
            e.printStackTrace(); // Handle the exception appropriately
        }
    }//GEN-LAST:event_TeacherLinkMouseClicked

    private void CourseLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CourseLinkMouseClicked
        StudentPanel.setVisible(true);
        TeacherPanel.setVisible(true);
        CoursePanel.setVisible(true);
        NoticePanel.setVisible(false);
        try {
            // Use the readFromFile method to read the course data
            ArrayList<String[]> courses = FileManagement.readFromFile("courses.txt", line -> {
                // Split the line by commas
                String[] parts = line.split(",");
                if (parts.length >= 0) {
                    return new String[]{parts[0], parts[2], parts[5], parts[6], parts[7]}; // Extract only the required indices
                }
                return null;
            });

            DefaultTableModel model = (DefaultTableModel) CoursesTable.getModel();

            // Clear existing rows to prevent duplication
            model.setRowCount(0);

            // Populate the table with filtered course data
            for (String[] course : courses) {
                if (course != null) { // Skip null values
                    model.addRow(course);
                }
            }
            model.setRowCount(model.getRowCount() + 1);
        } catch (IOException e) {
            e.printStackTrace(); // Handle the exception appropriately
        }
    }//GEN-LAST:event_CourseLinkMouseClicked

    private void NoticeLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NoticeLinkMouseClicked
        StudentPanel.setVisible(true);
        TeacherPanel.setVisible(true);
        CoursePanel.setVisible(true);
        NoticePanel.setVisible(true);
        basedPanel.setVisible(false);
        try {
            // Use the readFromFile method to read the notice data
            ArrayList<String[]> notices = FileManagement.readFromFile("notices.txt", line -> {
                // Split the line by commas
                String[] parts = line.split(",");
                if (parts.length >= 0) {
                    return new String[]{parts[0], parts[1], parts[2], parts[3]}; // Extract only the required indices
                }
                return null;
            });

            DefaultTableModel model = (DefaultTableModel) NoticesTable.getModel();

            // Clear existing rows to prevent duplication
            model.setRowCount(0);

            // Populate the table with filtered notice data
            for (String[] notice : notices) {
                if (notice != null) { // Skip null values
                    model.addRow(notice);
                }
            }
            model.setRowCount(model.getRowCount() + 1);
        } catch (IOException e) {
            e.printStackTrace(); // Handle the exception appropriately
        }
    }//GEN-LAST:event_NoticeLinkMouseClicked

    private void exitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitLabelMouseClicked

    private void exitLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabel1MouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitLabel1MouseClicked

    private void exitLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabel2MouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitLabel2MouseClicked

    private void exitLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabel3MouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitLabel3MouseClicked

    private void logoutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMouseClicked
        new LoginForm();
    }//GEN-LAST:event_logoutLabelMouseClicked

    private void exitLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabel5MouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitLabel5MouseClicked

    private void backLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseClicked
        StudentPanel.setVisible(true);
        TeacherPanel.setVisible(true);
        CoursePanel.setVisible(true);
        NoticePanel.setVisible(true);
        basedPanel.setVisible(true);
    }//GEN-LAST:event_backLabelMouseClicked

    private void showCoursesButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showCoursesButton1MouseClicked
        int row = TeachersTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please selected one row", "Selected row", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Use the readFromFile method to read the course data
                ArrayList<String[]> courses = FileManagement.readFromFile("courses.txt", line -> {
                    // Split the line by commas
                    String[] parts = line.split(",");
                    // Check if the email matches the teacher's email
                    if (parts.length >= 0 && parts[2].trim().equals((String) TeachersTable.getValueAt(row, 1))) { // Ensure there are enough fields and match email
                        return new String[]{parts[0], parts[5], parts[6], parts[7]}; // Extract only the required indices
                    }
                    return null; // Ignore lines that do not match the teacher email or have insufficient data
                });

                DefaultTableModel model = (DefaultTableModel) CoursesTeacherTable.getModel();

                // Clear existing rows to prevent duplication
                model.setRowCount(0);

                // Populate the table with filtered course data
                for (String[] course : courses) {
                    if (course != null) { // Skip null values
                        model.addRow(course);
                    }
                }
                model.setRowCount(model.getRowCount() +1);
            } catch (IOException e) {
                e.printStackTrace(); // Handle the exception appropriately
            }
        }
    }//GEN-LAST:event_showCoursesButton1MouseClicked

    private void showAssignmentButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAssignmentButtonMouseClicked
        int row = CoursesTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please selected one row", "Selected row", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Use the readFromFile method to read the assignment data
                ArrayList<String[]> assignments = FileManagement.readFromFile("assignments.txt", line -> {
                    // Split the line by commas
                    String[] parts = line.split(",");
                    // Check if the course name matches the course's name
                    if (parts.length >= 0 && parts[1].trim().equals((String) CoursesTable.getValueAt(row, 0))) { // Ensure there are enough fields and match course name
                        return new String[]{parts[0], parts[2], parts[4]}; // Extract only the required indices
                    }
                    return null; // Ignore lines that do not match the course name or have insufficient data
                });

                DefaultTableModel model = (DefaultTableModel) AssignmentCoursesTable.getModel();

                // Clear existing rows to prevent duplication
                model.setRowCount(0);

                // Populate the table with filtered assignment data
                for (String[] assignment : assignments) {
                    if (assignment != null) { // Skip null values
                        model.addRow(assignment);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace(); // Handle the exception appropriately
            }
        }
    }//GEN-LAST:event_showAssignmentButtonMouseClicked

    private void addCourseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCourseButtonMouseClicked
        String CourseName = (String) CoursesTable.getValueAt(CoursesTable.getRowCount() - 1, 0);
        String TeacherEmail = (String) CoursesTable.getValueAt(CoursesTable.getRowCount() - 1, 1);
        String Description = (String) CoursesTable.getValueAt(CoursesTable.getRowCount() - 1, 2);
        String Price = (String) CoursesTable.getValueAt(CoursesTable.getRowCount() - 1, 3);
        String TimePeriod = (String) CoursesTable.getValueAt(CoursesTable.getRowCount() - 1, 4);
        String[] TeacherParts = FileManagement.search(TeacherEmail, "teachers.txt");
        if (TeacherParts.length >= 4) {
            Teacher teacher = new Teacher(TeacherParts[0], TeacherParts[1], TeacherParts[2], TeacherParts[3], true);
            Course course = new Course(CourseName, teacher, Description, Double.parseDouble(Price), TimePeriod);
            try {
                Admin.courses.add(course);
                FileManagement.writeSingleObjectToFile(course, "courses.txt", Course::objectToString);
                JOptionPane.showMessageDialog(null, "Course added successfully!");
            } catch (IOException ex) {
                Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultTableModel model = (DefaultTableModel) CoursesTable.getModel();
            model.setRowCount(model.getRowCount() + 1);
        } else {
            JOptionPane.showMessageDialog(this, "Email is invalid", "OK", JOptionPane.ERROR_MESSAGE);
            CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 0);
            CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 1);
            CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 2);
            CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 3);
            CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 4);
        }
    }//GEN-LAST:event_addCourseButtonMouseClicked

    private void addTeacherButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addTeacherButtonMouseClicked
        String Name = (String) TeachersTable.getValueAt(TeachersTable.getRowCount() - 1, 0);
        String Email = (String) TeachersTable.getValueAt(TeachersTable.getRowCount() - 1, 1);
        String Password = (String) TeachersTable.getValueAt(TeachersTable.getRowCount() - 1, 2);
        String Specialty = (String) TeachersTable.getValueAt(TeachersTable.getRowCount() - 1, 3);
        if (FileManagement.validEmail(Email) && !FileManagement.emailExists(Email, "teachers.txt")) {
            Teacher teacher = new Teacher(Name, Email, Password, Specialty);
            try {
                Admin.teachers.add(teacher);
                FileManagement.writeSingleObjectToFile(teacher, "teachers.txt", Teacher::objectToString);
                JOptionPane.showMessageDialog(null, "Teacher added successfully!");
            } catch (IOException ex) {
                Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            DefaultTableModel model = (DefaultTableModel) TeachersTable.getModel();
            model.setRowCount(model.getRowCount() + 1);
        } else {
            JOptionPane.showMessageDialog(this, "Email is invalid", "OK", JOptionPane.ERROR_MESSAGE);
            StudentsTable.setValueAt("", TeachersTable.getRowCount() - 1, 0);
            StudentsTable.setValueAt("", TeachersTable.getRowCount() - 1, 1);
            StudentsTable.setValueAt("", TeachersTable.getRowCount() - 1, 2);
        }
    }//GEN-LAST:event_addTeacherButtonMouseClicked

    private void showCoursesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showCoursesButtonMouseClicked
        int row = StudentsTable.getSelectedRow(); // Get the selected student
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please select one row", "Selected row", JOptionPane.ERROR_MESSAGE);
        } else {
            String studentEmail = (String) StudentsTable.getValueAt(row, 1); // Get the student's email
            // Retrieve the student data from students.txt
            String[] studentData = FileManagement.search(studentEmail, "students.txt");
            if (studentData != null) {
                // Debug: Print the entire studentData array
                System.out.println("Student data: " + Arrays.toString(studentData));

                String coursesField = "";
                for(int i=3 ;i<studentData.length; i++){
                    if(studentData[i].trim().startsWith("["))
                        studentData[i] = studentData[i].trim().substring(1, studentData[i].length() - 1);
                    if(studentData[i].trim().endsWith("]"))
                        studentData[i] = studentData[i].trim().substring(0, studentData[i].length() - 2);
                    coursesField += studentData[i].trim();
                    if(i != studentData.length-1)
                        coursesField += ",";
                }
                System.out.println("Raw courses field: " + coursesField);

                // Split by comma and optional spaces, ensure that no empty course is added
                String[] enrolledCourses = coursesField.split(",\\s*");
                System.out.println("Enrolled courses: " + Arrays.toString(enrolledCourses));
                
                // Load the courses data from courses.txt
                ArrayList<String[]> matchingCourses = new ArrayList<>();
                for (String c : enrolledCourses) {
                    System.out.println(c);
                    String[] course = FileManagement.searchCourse(c, "courses.txt");
                    System.out.println("courses: " + Arrays.toString(course));
                    String[] cc = {course[0] ,course[5] , course[6] , course[7]};
                    matchingCourses.add(cc);
                }
                System.out.println("Matching courses: " + matchingCourses);

                // Populate the table with the student's courses
                DefaultTableModel model = (DefaultTableModel) CoursesStudentTable.getModel();
                model.setRowCount(0); // Clear existing rows

                // Add the matched courses to the table
                for (String[] course : matchingCourses) {
                    model.addRow(course);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Student not found in the records!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_showCoursesButtonMouseClicked

    private void addNoticeButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNoticeButton2MouseClicked
        String CourseName = (String) NoticesTable.getValueAt(NoticesTable.getRowCount() - 1, 0);
        String Title = (String) NoticesTable.getValueAt(NoticesTable.getRowCount() - 1, 1);
        String Content = (String) NoticesTable.getValueAt(NoticesTable.getRowCount() - 1, 2);
        String Date = (String) NoticesTable.getValueAt(NoticesTable.getRowCount() - 1, 3);
        Notice notice = new Notice(CourseName, Title, Content, Date);
        try {
            Admin.notices.add(notice);
            FileManagement.writeSingleObjectToFile(notice, "notices.txt", Notice::objectToString);
            JOptionPane.showMessageDialog(null, "Notice added successfully!");
        } catch (IOException ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel model = (DefaultTableModel) NoticesTable.getModel();
        model.setRowCount(model.getRowCount() + 1);

    }//GEN-LAST:event_addNoticeButton2MouseClicked

    private void addStudentButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStudentButtonMouseClicked
        int row = StudentsTable.getSelectedRow(); // Get the selected student
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please select one row", "Selected row", JOptionPane.ERROR_MESSAGE);
        } else {
            String studentEmail = (String) StudentsTable.getValueAt(row, 1); // Get the student's email
            try {
                // Retrieve the student data from students.txt
                String[] studentData = FileManagement.search(studentEmail, "students.txt");
                if (studentData != null) {
                    // Extract the enrolled courses field (index 3)
                    String coursesField = studentData[3].trim(); // Example: "[Mathematics, Physics]"
                    System.out.println("Raw courses field: " + coursesField);

                    // Ensure brackets are removed and courses are split correctly
                    if (coursesField.startsWith("[") && coursesField.endsWith("]")) {
                        coursesField = coursesField.substring(1, coursesField.length() - 1); // Remove [ and ]
                    }
                    String[] enrolledCourses = coursesField.split(",\\s*"); // Split by comma and optional space
                    System.out.println("Enrolled courses: " + Arrays.toString(enrolledCourses));

                    // Read from courses.txt and filter courses based on enrolledCourses
                    ArrayList<String[]> courses = FileManagement.readFromFile("courses.txt", line -> {
                        String[] parts = line.split(",");
                        if (parts.length >= 5 && Arrays.asList(enrolledCourses).contains(parts[0].trim())) {
                            return new String[]{parts[0], parts[5], parts[6], parts[7]}; // Course Name, Description, Price, Duration
                        }
                        return null;
                    });

                    // Populate the CoursesStudentTable with the retrieved data
                    DefaultTableModel model = (DefaultTableModel) CoursesStudentTable.getModel();
                    model.setRowCount(0); // Clear existing rows

                    for (String[] course : courses) {
                        if (course != null) {
                            model.addRow(course);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Student not found in the records!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_addStudentButtonMouseClicked

    private void editNoticeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editNoticeButtonMouseClicked
        int rowCount = NoticesTable.getRowCount();
        try {
            ArrayList<Notice> Notices = new ArrayList<>();
            for (int row = 0; row < rowCount; row++) {
                Admin.notices.removeFirst();
                Notice notice = new Notice((String) NoticesTable.getValueAt(row, 0), (String) NoticesTable.getValueAt(row, 1), (String) NoticesTable.getValueAt(row, 2), (String) NoticesTable.getValueAt(row, 3));
                Notices.add(notice);
                Admin.notices.addLast(notice);
            }
            FileManagement.writeToFile(Notices, "notices.txt", notice -> notice.objectToString());
            if (NoticesTable.getValueAt(rowCount - 1, 0) != null) {
                DefaultTableModel model = (DefaultTableModel) NoticesTable.getModel();
                model.setRowCount(model.getRowCount() + 1);
            }
            JOptionPane.showMessageDialog(null, "The MOdification is done!");
        } catch (IOException ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editNoticeButtonMouseClicked

    private void editCourseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editCourseButtonMouseClicked
        int rowCount = CoursesTable.getRowCount();
        ArrayList<Course> Courses = new ArrayList<>();
        for (int row = 0; row < rowCount; row++) {
            String CourseName = (String) CoursesTable.getValueAt(row, 0);
            String TeacherEmail = (String) CoursesTable.getValueAt(row, 1);
            String Description = (String) CoursesTable.getValueAt(row, 2);
            String Price = (String) CoursesTable.getValueAt(row, 3);
            String TimePeriod = (String) CoursesTable.getValueAt(row, 4);
            String[] TeacherParts = FileManagement.search(TeacherEmail, "teachers.txt");
            Course course;
            if (TeacherParts != null) {
                Teacher teacher = new Teacher(TeacherParts[0], TeacherParts[1], TeacherParts[2], TeacherParts[3], true);
                course = new Course(CourseName, teacher, Description, Double.parseDouble(Price), TimePeriod);
                Courses.add(course);
                try {
                    FileManagement.writeToFile(Courses, "courses.txt", course1 -> course1.objectToString());
                } catch (IOException ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (!"".equals((String) CoursesTable.getValueAt(rowCount - 1, 0)) || CoursesTable.getValueAt(rowCount - 1, 0) != null) {
                    DefaultTableModel model = (DefaultTableModel) CoursesTable.getModel();
                    model.setRowCount(model.getRowCount() + 1);
                }
                JOptionPane.showMessageDialog(null, "The MOdification is done!");
            } else {
                JOptionPane.showMessageDialog(this, "This Teacher is not avaliable in row " + row, "!!", JOptionPane.ERROR_MESSAGE);
                CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 0);
                CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 1);
                CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 2);
                CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 3);
                CoursesTable.setValueAt("", CoursesTable.getRowCount() - 1, 4);
            }
        }
    }//GEN-LAST:event_editCourseButtonMouseClicked

    private void deleteCoursesTeacherButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCoursesTeacherButtonMouseClicked
        int row = CoursesTeacherTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please selected one row", "Selected row", JOptionPane.ERROR_MESSAGE);
        } else {
            String[] coursedata = FileManagement.searchCourse((String) CoursesTeacherTable.getValueAt(row, 0), "courses.txt");
            Teacher teacher = new Teacher(coursedata[1], coursedata[2], coursedata[3], coursedata[4], true);
            Course decourse = new Course(coursedata[0], teacher, coursedata[5], Double.parseDouble(coursedata[6]), coursedata[7]);
            teacher.deleteCourses(decourse);
            try {
                // Use the readFromFile method to read the course data
                ArrayList<String[]> coursesdata = FileManagement.readFromFile("courses.txt", line -> {
                    // Split the line by commas
                    String[] parts = line.split(",");
                    if (parts.length >= 0) {
                        if (parts[0].equals((String) CoursesTeacherTable.getValueAt(row, 0)) && parts[2].equals(coursedata[2])) {
                            return new String[]{parts[0], null, null, null, parts[4], parts[5], parts[6], parts[7]};
                        }
                        return new String[]{parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7]}; // Extract only the required indices
                    }
                    return null;
                });
                ArrayList<Course> courses = new ArrayList<>();
                for (String[] course : coursesdata) {
                    Teacher teacher1 = new Teacher(course[1], course[2], course[3], course[4], true);
                    Course addcourse = new Course(course[0], teacher1, course[5], Double.parseDouble(course[6]), course[7]);
                    courses.add(addcourse);
                }
                FileManagement.writeToFile(courses, "courses.txt", Course::objectToString);
                // Use the readFromFile method to read the course data
                ArrayList<String[]> Courses = FileManagement.readFromFile("courses.txt", line -> {
                    // Split the line by commas
                    String[] parts = line.split(",");
                    // Check if the email matches the teacher's email
                    if (parts.length >= 0 && parts[2].trim().equals(coursedata[2])) { // Ensure there are enough fields and match email
                        return new String[]{parts[0], parts[5], parts[6], parts[7]}; // Extract only the required indices
                    }
                    return null; // Ignore lines that do not match the teacher email or have insufficient data
                });
                DefaultTableModel model = (DefaultTableModel) CoursesTeacherTable.getModel();
                // Clear existing rows to prevent duplication
                model.setRowCount(0);
                // Populate the table with filtered course data
                for (String[] course : Courses) {
                    if (course != null) { // Skip null values
                        model.addRow(course);
                    }
                }
                JOptionPane.showMessageDialog(null, "The Deletion is done!");
            } catch (IOException e) {
                e.printStackTrace(); // Handle the exception appropriately
            }
        }
    }//GEN-LAST:event_deleteCoursesTeacherButtonMouseClicked

    private void addCoursesTeacherButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCoursesTeacherButtonMouseClicked
        String CourseName = (String) CoursesTable.getValueAt(CoursesTable.getRowCount()-1, 0);
        String Description = (String) CoursesTable.getValueAt(CoursesTable.getRowCount()-1, 1);
        String Price = (String) CoursesTable.getValueAt(CoursesTable.getRowCount()-1, 2);
        String TimePeriod = (String) CoursesTable.getValueAt(CoursesTable.getRowCount()-1, 3);
        String[] coursedate = FileManagement.searchCourse(CourseName, "courses.txt");
        if(coursedate != null){
            if(coursedate[1] == null){
                try {
                    // Use the readFromFile method to read the course data
                    ArrayList<String[]> courses = FileManagement.readFromFile("courses.txt", line -> {
                        // Split the line by commas
                        String[] parts = line.split(",");
                        if (parts.length >= 0 && !parts[0].equals(CourseName)) {
                            return new String[]{parts[0],parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7]}; // Extract only the required indices
                        }
                        return null;
                    });
                    int row = TeachersTable.getSelectedRow();
                    String[] course = {CourseName, (String)TeachersTable.getValueAt(row, 0) , (String)TeachersTable.getValueAt(row, 1), (String)TeachersTable.getValueAt(row, 2), (String)TeachersTable.getValueAt(row, 3), Description, Price, TimePeriod};
                    courses.add(course);
                    ArrayList<Course> Courses = new ArrayList<>();
                    for(String[] course1 : courses){
                        Teacher teacher = new Teacher(course1[1], course1[2], course1[3], course1[4], true);
                        Course addcourse = new Course(course1[0], teacher, course1[5], Double.parseDouble(course1[6]), course1[7]);
                        Courses.add(addcourse);
                    }
                    FileManagement.writeToFile(Courses, "courses.txt", course1 -> course1.objectToString());

                    DefaultTableModel model = (DefaultTableModel) CoursesTeacherTable.getModel();

                    // Clear existing rows to prevent duplication
                    model.setRowCount(0);

                    // Populate the table with filtered course data
                    for (String[] course2 : courses) {
                        if (course2 != null) { // Skip null values
                            model.addRow(course2);
                        }
                    }
                    model.setRowCount(model.getRowCount() + 1);
                    JOptionPane.showMessageDialog(null, "The adding is done!");
                } catch (IOException ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else{
                JOptionPane.showMessageDialog(this, "This course has teacher " , "!!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addCoursesTeacherButtonMouseClicked

    
    public void updateAdminName(String newName) {
        File file = new File("admins.txt");
        ArrayList<String> lines = new ArrayList<>();
        boolean adminFound = false;

        try {
            // Read all lines from the admins.txt file
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            while ((line = reader.readLine()) != null) {
                lines.add(line);
            }
            reader.close();

            // Iterate through the lines to find the admin with the matching email
            for (int i = 0; i < lines.size(); i++) {
                String[] parts = lines.get(i).split(",");
                if (parts.length >= 2 && parts[1].trim().equalsIgnoreCase(this.adminEmail)) {
                    // If the admin email matches, update the name
                    parts[0] = newName; // Update admin's name
                    lines.set(i, String.join(",", parts)); // Update the line in the list
                    adminFound = true;
                    break;
                }
            }

            // If the admin was found, write the updated data back to the file
            if (adminFound) {
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                for (String updatedLine : lines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
                writer.close();
                System.out.println("Admin details updated successfully.");
            } else {
                System.out.println("Admin with email " + this.adminEmail + " not found.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
    private void editDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDataActionPerformed
            String newName = jlAdminName.getText();
    
            // Update admin name in admins.txt
            updateAdminName(newName);

            // Optionally, update the UI to reflect the changes
            jlAdminName.setText(newName);

            JOptionPane.showMessageDialog(this, "Admin name updated successfully!");
        
    }//GEN-LAST:event_editDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AdminForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AssignmentCoursesTable;
    private javax.swing.JLabel CourseLabel;
    private javax.swing.JLabel CourseLink;
    private javax.swing.JPanel CoursePanel;
    private javax.swing.JLabel CoursesLabel;
    private javax.swing.JTable CoursesStudentTable;
    private javax.swing.JTable CoursesTable;
    private javax.swing.JLabel CoursesTeacherLabel;
    private javax.swing.JTable CoursesTeacherTable;
    private javax.swing.JLabel NoticeLabel;
    private javax.swing.JLabel NoticeLink;
    private javax.swing.JPanel NoticePanel;
    private javax.swing.JLabel NoticesLabel;
    private javax.swing.JTable NoticesTable;
    private javax.swing.JLabel ServiceLabel;
    private javax.swing.JPanel ServicePanel;
    private javax.swing.JLabel StudentLabel;
    private javax.swing.JPanel StudentPanel;
    private javax.swing.JLabel StudentsLabel;
    private javax.swing.JTable StudentsTable;
    private javax.swing.JLabel TeacherLabel;
    private javax.swing.JLabel TeacherLink;
    private javax.swing.JPanel TeacherPanel;
    private javax.swing.JLabel TeachersLabel;
    private javax.swing.JTable TeachersTable;
    private javax.swing.JButton addCourseButton;
    private javax.swing.JButton addCoursesTeacherButton;
    private javax.swing.JButton addNoticeButton2;
    private javax.swing.JButton addStudentButton;
    private javax.swing.JButton addTeacherButton;
    private javax.swing.JLabel adminLabel;
    private javax.swing.JLabel adminNameLabel;
    private javax.swing.JLabel assignCourseLabel;
    private javax.swing.JLabel backLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JPanel basedPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel courseStudentLabel;
    private javax.swing.JButton deleteCoursesTeacherButton;
    private javax.swing.JButton editCourseButton;
    private javax.swing.JButton editData;
    private javax.swing.JButton editNoticeButton;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JLabel exitLabel1;
    private javax.swing.JLabel exitLabel2;
    private javax.swing.JLabel exitLabel3;
    private javax.swing.JLabel exitLabel5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jlAdminName;
    private javax.swing.JLabel logoutLabel;
    private javax.swing.JButton showAssignmentButton;
    private javax.swing.JButton showCoursesButton;
    private javax.swing.JButton showCoursesButton1;
    private javax.swing.JLabel studentLink;
    // End of variables declaration//GEN-END:variables
}
